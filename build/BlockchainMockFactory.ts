/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { BlockchainMock } from "./BlockchainMock";

export class BlockchainMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(): Promise<BlockchainMock> {
    return super.deploy() as Promise<BlockchainMock>;
  }
  getDeployTransaction(): UnsignedTransaction {
    return super.getDeployTransaction();
  }
  attach(address: string): BlockchainMock {
    return super.attach(address) as BlockchainMock;
  }
  connect(signer: Signer): BlockchainMockFactory {
    return super.connect(signer) as BlockchainMockFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockchainMock {
    return new Contract(address, _abi, signerOrProvider) as BlockchainMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "blocks",
    outputs: [
      {
        internalType: "uint256",
        name: "baseFee",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maximumBaseFee",
        type: "uint256"
      }
    ],
    name: "isCongested",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "fee",
        type: "uint256[]"
      }
    ],
    name: "setBlocks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102dc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637fb342ee146100465780639157447d1461005b578063f25b3f9914610084575b600080fd5b61005961005436600461017a565b6100a4565b005b61006e61006936600461022a565b610113565b60405161007b919061024b565b60405180910390f35b610097610092366004610212565b610149565b60405161007b9190610256565b60005b815181101561010f576100b8610167565b8282815181106100c457fe5b60209081029190910101518152600080546001818101835591805291517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390920191909155016100a7565b5050565b6000816000848154811061012357fe5b9060005260206000200160000154111561013f57506001610143565b5060005b92915050565b6000818154811061015657fe5b600091825260209091200154905081565b6040518060200160405280600081525090565b6000602080838503121561018c578182fd5b823567ffffffffffffffff8111156101a2578283fd5b80840185601f8201126101b3578384fd5b803591506101c86101c383610286565b61025f565b82815283810190828501858502840186018910156101e4578687fd5b8693505b848410156102065780358352600193909301929185019185016101e8565b50979650505050505050565b600060208284031215610223578081fd5b5035919050565b6000806040838503121561023c578081fd5b50508035926020909101359150565b901515815260200190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561027e57600080fd5b604052919050565b600067ffffffffffffffff82111561029c578081fd5b506020908102019056fea26469706673582212208c25114cfd604ce06789fee88aa02302d2f7b75002a7002f58b76aa0cbe0c93b64736f6c63430006020033";
