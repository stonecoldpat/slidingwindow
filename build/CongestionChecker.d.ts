/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CongestionCheckerInterface extends Interface {
  functions: {
    blocks: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    isCongested: TypedFunctionDescription<{
      encode([blockNumber, maximumBaseFee]: [
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    isPeriodUncongested: TypedFunctionDescription<{
      encode([startBlock, k, n, maximumBaseFee]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setBlocks: TypedFunctionDescription<{
      encode([fee]: [BigNumberish[]]): string;
    }>;
  };

  events: {};
}

export class CongestionChecker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CongestionChecker;
  attach(addressOrName: string): CongestionChecker;
  deployed(): Promise<CongestionChecker>;

  on(event: EventFilter | string, listener: Listener): CongestionChecker;
  once(event: EventFilter | string, listener: Listener): CongestionChecker;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CongestionChecker;
  removeAllListeners(eventName: EventFilter | string): CongestionChecker;
  removeListener(eventName: any, listener: Listener): CongestionChecker;

  interface: CongestionCheckerInterface;

  functions: {
    blocks(arg0: BigNumberish): Promise<BigNumber>;

    isCongested(
      blockNumber: BigNumberish,
      maximumBaseFee: BigNumberish
    ): Promise<boolean>;

    isPeriodUncongested(
      startBlock: BigNumberish,
      k: BigNumberish,
      n: BigNumberish,
      maximumBaseFee: BigNumberish
    ): Promise<boolean>;

    setBlocks(
      fee: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  blocks(arg0: BigNumberish): Promise<BigNumber>;

  isCongested(
    blockNumber: BigNumberish,
    maximumBaseFee: BigNumberish
  ): Promise<boolean>;

  isPeriodUncongested(
    startBlock: BigNumberish,
    k: BigNumberish,
    n: BigNumberish,
    maximumBaseFee: BigNumberish
  ): Promise<boolean>;

  setBlocks(
    fee: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    blocks(arg0: BigNumberish): Promise<BigNumber>;

    isCongested(
      blockNumber: BigNumberish,
      maximumBaseFee: BigNumberish
    ): Promise<BigNumber>;

    isPeriodUncongested(
      startBlock: BigNumberish,
      k: BigNumberish,
      n: BigNumberish,
      maximumBaseFee: BigNumberish
    ): Promise<BigNumber>;

    setBlocks(fee: BigNumberish[]): Promise<BigNumber>;
  };
}
