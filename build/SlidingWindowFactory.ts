/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { SlidingWindow } from "./SlidingWindow";

export class SlidingWindowFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(): Promise<SlidingWindow> {
    return super.deploy() as Promise<SlidingWindow>;
  }
  getDeployTransaction(): UnsignedTransaction {
    return super.getDeployTransaction();
  }
  attach(address: string): SlidingWindow {
    return super.attach(address) as SlidingWindow;
  }
  connect(signer: Signer): SlidingWindowFactory {
    return super.connect(signer) as SlidingWindowFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SlidingWindow {
    return new Contract(address, _abi, signerOrProvider) as SlidingWindow;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "blocks",
    outputs: [
      {
        internalType: "uint256",
        name: "baseFee",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maximumBaseFee",
        type: "uint256"
      }
    ],
    name: "isCongested",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "startBlock",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "k",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "n",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maximumBaseFee",
        type: "uint256"
      }
    ],
    name: "isPeriodCongested",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "fee",
        type: "uint256[]"
      }
    ],
    name: "setBlocks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061054c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637fb342ee146100515780638a2aea5e146100665780639157447d1461008f578063f25b3f99146100a2575b600080fd5b61006461005f36600461031c565b6100c2565b005b6100796100743660046103ed565b610131565b604051610086919061041e565b60405180910390f35b61007961009d3660046103cc565b6102b5565b6100b56100b03660046103b4565b6102eb565b60405161008691906104c6565b60005b815181101561012d576100d6610309565b8282815181106100e257fe5b60209081029190910101518152600080546001818101835591805291517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390920191909155016100c5565b5050565b60008383101561015c5760405162461bcd60e51b81526004016101539061047d565b60405180910390fd5b60005483111561017e5760405162461bcd60e51b815260040161015390610429565b60008054604080519188900380835260208082028401019091526060919080156101b2578160200160208202803883390190505b509050865b858801811015610211576101cb81866102b5565b8282815181106101d757fe5b6020026020010190151590811515815250508181815181106101f557fe5b602002602001015115610209578260010192505b6001016101b7565b508685015b6000548110156102a557818682038151811061022e57fe5b602002602001015115610242576001830392505b61024c81866102b5565b82828151811061025857fe5b60200260200101901515908115158152505081818151811061027657fe5b60200260200101511561028a578260010192505b86831061029d57600193505050506102ad565b600101610216565b506000925050505b949350505050565b600081600084815481106102c557fe5b906000526020600020016000015411156102e1575060016102e5565b5060005b92915050565b600081815481106102f857fe5b600091825260209091200154905081565b6040518060200160405280600081525090565b6000602080838503121561032e578182fd5b823567ffffffffffffffff811115610344578283fd5b80840185601f820112610355578384fd5b8035915061036a610365836104f6565b6104cf565b8281528381019082850185850284018601891015610386578687fd5b8693505b848410156103a857803583526001939093019291850191850161038a565b50979650505050505050565b6000602082840312156103c5578081fd5b5035919050565b600080604083850312156103de578081fd5b50508035926020909101359150565b60008060008060808587031215610402578182fd5b5050823594602084013594506040840135936060013592509050565b901515815260200190565b60208082526034908201527f546f74616c20626c6f636b732073686f756c64206265206772656174657220746040820152733430b7101437b91032b8bab0b6103a379490271760611b606082015260800190565b60208082526029908201527f4e2073686f756c642062652067726561746572207468616e20286f722065717560408201526830b6103a379490259760b91b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff811182821017156104ee57600080fd5b604052919050565b600067ffffffffffffffff82111561050c578081fd5b506020908102019056fea2646970667358221220fb1ea4c7c82462e5e9b6141b07f4b103dde5b9561031d559a7eb8d3516d0860164736f6c63430006020033";
